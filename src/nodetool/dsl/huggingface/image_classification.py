# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode, SingleOutputGraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.huggingface.image_classification
from nodetool.workflows.base_node import BaseNode


class ImageClassifier(
    SingleOutputGraphNode[dict[str, float]], GraphNode[dict[str, float]]
):
    """

    Classifies images into predefined categories.
    image, classification, labeling, categorization

    Use cases:
    - Content moderation by detecting inappropriate images
    - Organizing photo libraries by automatically tagging images
    """

    model: types.HFImageClassification | OutputHandle[types.HFImageClassification] = (
        connect_field(
            default=types.HFImageClassification(
                type="hf.image_classification",
                repo_id="",
                path=None,
                variant=None,
                allow_patterns=None,
                ignore_patterns=None,
            ),
            description="The model ID to use for the classification",
        )
    )
    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The input image to classify",
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.huggingface.image_classification.ImageClassifier

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.huggingface.image_classification
from nodetool.workflows.base_node import BaseNode


class ZeroShotImageClassifier(
    SingleOutputGraphNode[dict[str, float]], GraphNode[dict[str, float]]
):
    """

    Classifies images into categories without the need for training data.
    image, classification, labeling, categorization

    Use cases:
    - Quickly categorize images without training data
    - Identify objects in images without predefined labels
    - Automate image tagging for large datasets
    """

    model: (
        types.HFZeroShotImageClassification
        | OutputHandle[types.HFZeroShotImageClassification]
    ) = connect_field(
        default=types.HFZeroShotImageClassification(
            type="hf.zero_shot_image_classification",
            repo_id="",
            path=None,
            variant=None,
            allow_patterns=None,
            ignore_patterns=None,
        ),
        description="The model ID to use for the classification",
    )
    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The input image to classify",
    )
    candidate_labels: str | OutputHandle[str] = connect_field(
        default="",
        description="The candidate labels to classify the image against, separated by commas",
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.huggingface.image_classification.ZeroShotImageClassifier

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()
