# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode, SingleOutputGraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.huggingface.image_segmentation
from nodetool.workflows.base_node import BaseNode


class FindSegment(SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]):
    """

    Extracts a specific segment from a list of segmentation masks.
    image, segmentation, object detection, mask
    """

    segments: (
        list[types.ImageSegmentationResult]
        | OutputHandle[list[types.ImageSegmentationResult]]
    ) = connect_field(default=[], description="The segmentation masks to search")
    segment_label: str | OutputHandle[str] = connect_field(
        default="", description="The label of the segment to extract"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.huggingface.image_segmentation.FindSegment

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.huggingface.image_segmentation
from nodetool.workflows.base_node import BaseNode


class SAM2Segmentation(
    SingleOutputGraphNode[list[types.ImageRef]], GraphNode[list[types.ImageRef]]
):
    """

    Performs semantic segmentation on images using SAM2 (Segment Anything Model 2).
    image, segmentation, object detection, scene parsing, mask

    Use cases:
    - Automatic segmentation of objects in images
    - Instance segmentation for computer vision tasks
    - Interactive segmentation with point prompts
    - Scene understanding and object detection
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The input image to segment",
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.huggingface.image_segmentation.SAM2Segmentation

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.huggingface.image_segmentation
from nodetool.workflows.base_node import BaseNode


class Segmentation(
    SingleOutputGraphNode[list[types.ImageSegmentationResult]],
    GraphNode[list[types.ImageSegmentationResult]],
):
    """

    Performs semantic segmentation on images, identifying and labeling different regions.
    image, segmentation, object detection, scene parsing

    Use cases:
    - Segmenting objects in images
    - Segmenting facial features in images
    """

    model: types.HFImageSegmentation | OutputHandle[types.HFImageSegmentation] = (
        connect_field(
            default=types.HFImageSegmentation(
                type="hf.image_segmentation",
                repo_id="nvidia/segformer-b3-finetuned-ade-512-512",
                path=None,
                variant=None,
                allow_patterns=None,
                ignore_patterns=None,
            ),
            description="The model ID to use for the segmentation",
        )
    )
    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The input image to segment",
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.huggingface.image_segmentation.Segmentation

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.huggingface.image_segmentation
from nodetool.workflows.base_node import BaseNode


class VisualizeSegmentation(
    SingleOutputGraphNode[types.ImageRef], GraphNode[types.ImageRef]
):
    """

    Visualizes segmentation masks on images with labels.
    image, segmentation, visualization, mask

    Use cases:
    - Visualize results of image segmentation models
    - Analyze and compare different segmentation techniques
    - Create labeled images for presentations or reports
    """

    image: types.ImageRef | OutputHandle[types.ImageRef] = connect_field(
        default=types.ImageRef(type="image", uri="", asset_id=None, data=None),
        description="The input image to visualize",
    )
    segments: (
        list[types.ImageSegmentationResult]
        | OutputHandle[list[types.ImageSegmentationResult]]
    ) = connect_field(default=[], description="The segmentation masks to visualize")

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.huggingface.image_segmentation.VisualizeSegmentation

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()
