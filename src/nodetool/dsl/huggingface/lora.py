# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode, SingleOutputGraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.huggingface.lora
from nodetool.workflows.base_node import BaseNode


class LoRASelector(
    SingleOutputGraphNode[list[types.HFLoraSDConfig]],
    GraphNode[list[types.HFLoraSDConfig]],
):
    """

    Selects up to 5 LoRA models to apply to a Stable Diffusion model.
    lora, model customization, fine-tuning, SD

    Use cases:
    - Combining multiple LoRA models for unique image styles
    - Fine-tuning Stable Diffusion models with specific attributes
    - Experimenting with different LoRA combinations
    """

    lora1: types.HFLoraSD | OutputHandle[types.HFLoraSD] = connect_field(
        default=types.HFLoraSD(
            type="hf.lora_sd",
            repo_id="",
            path=None,
            variant=None,
            allow_patterns=None,
            ignore_patterns=None,
        ),
        description="First LoRA model",
    )
    strength1: float | OutputHandle[float] = connect_field(
        default=1.0, description="Strength for first LoRA"
    )
    lora2: types.HFLoraSD | OutputHandle[types.HFLoraSD] = connect_field(
        default=types.HFLoraSD(
            type="hf.lora_sd",
            repo_id="",
            path=None,
            variant=None,
            allow_patterns=None,
            ignore_patterns=None,
        ),
        description="Second LoRA model",
    )
    strength2: float | OutputHandle[float] = connect_field(
        default=1.0, description="Strength for second LoRA"
    )
    lora3: types.HFLoraSD | OutputHandle[types.HFLoraSD] = connect_field(
        default=types.HFLoraSD(
            type="hf.lora_sd",
            repo_id="",
            path=None,
            variant=None,
            allow_patterns=None,
            ignore_patterns=None,
        ),
        description="Third LoRA model",
    )
    strength3: float | OutputHandle[float] = connect_field(
        default=1.0, description="Strength for third LoRA"
    )
    lora4: types.HFLoraSD | OutputHandle[types.HFLoraSD] = connect_field(
        default=types.HFLoraSD(
            type="hf.lora_sd",
            repo_id="",
            path=None,
            variant=None,
            allow_patterns=None,
            ignore_patterns=None,
        ),
        description="Fourth LoRA model",
    )
    strength4: float | OutputHandle[float] = connect_field(
        default=1.0, description="Strength for fourth LoRA"
    )
    lora5: types.HFLoraSD | OutputHandle[types.HFLoraSD] = connect_field(
        default=types.HFLoraSD(
            type="hf.lora_sd",
            repo_id="",
            path=None,
            variant=None,
            allow_patterns=None,
            ignore_patterns=None,
        ),
        description="Fifth LoRA model",
    )
    strength5: float | OutputHandle[float] = connect_field(
        default=1.0, description="Strength for fifth LoRA"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.huggingface.lora.LoRASelector

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()


import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.huggingface.lora
from nodetool.workflows.base_node import BaseNode


class LoRASelectorXL(
    SingleOutputGraphNode[list[types.HFLoraSDXLConfig]],
    GraphNode[list[types.HFLoraSDXLConfig]],
):
    """

    Selects up to 5 LoRA models to apply to a Stable Diffusion XL model.
    lora, model customization, fine-tuning, SDXL

    Use cases:
    - Combining multiple LoRA models for unique image styles
    - Fine-tuning Stable Diffusion XL models with specific attributes
    - Experimenting with different LoRA combinations
    """

    lora1: types.HFLoraSDXL | OutputHandle[types.HFLoraSDXL] = connect_field(
        default=types.HFLoraSDXL(
            type="hf.lora_sdxl",
            repo_id="",
            path=None,
            variant=None,
            allow_patterns=None,
            ignore_patterns=None,
        ),
        description="First LoRA model",
    )
    strength1: float | OutputHandle[float] = connect_field(
        default=1.0, description="Strength for first LoRA"
    )
    lora2: types.HFLoraSDXL | OutputHandle[types.HFLoraSDXL] = connect_field(
        default=types.HFLoraSDXL(
            type="hf.lora_sdxl",
            repo_id="",
            path=None,
            variant=None,
            allow_patterns=None,
            ignore_patterns=None,
        ),
        description="Second LoRA model",
    )
    strength2: float | OutputHandle[float] = connect_field(
        default=1.0, description="Strength for second LoRA"
    )
    lora3: types.HFLoraSDXL | OutputHandle[types.HFLoraSDXL] = connect_field(
        default=types.HFLoraSDXL(
            type="hf.lora_sdxl",
            repo_id="",
            path=None,
            variant=None,
            allow_patterns=None,
            ignore_patterns=None,
        ),
        description="Third LoRA model",
    )
    strength3: float | OutputHandle[float] = connect_field(
        default=1.0, description="Strength for third LoRA"
    )
    lora4: types.HFLoraSDXL | OutputHandle[types.HFLoraSDXL] = connect_field(
        default=types.HFLoraSDXL(
            type="hf.lora_sdxl",
            repo_id="",
            path=None,
            variant=None,
            allow_patterns=None,
            ignore_patterns=None,
        ),
        description="Fourth LoRA model",
    )
    strength4: float | OutputHandle[float] = connect_field(
        default=1.0, description="Strength for fourth LoRA"
    )
    lora5: types.HFLoraSDXL | OutputHandle[types.HFLoraSDXL] = connect_field(
        default=types.HFLoraSDXL(
            type="hf.lora_sdxl",
            repo_id="",
            path=None,
            variant=None,
            allow_patterns=None,
            ignore_patterns=None,
        ),
        description="Fifth LoRA model",
    )
    strength5: float | OutputHandle[float] = connect_field(
        default=1.0, description="Strength for fifth LoRA"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.huggingface.lora.LoRASelectorXL

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()
