# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode, SingleOutputGraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.huggingface.ranking
from nodetool.workflows.base_node import BaseNode


class Reranker(SingleOutputGraphNode[dict[str, float]], GraphNode[dict[str, float]]):
    """

    Reranks pairs of text based on their semantic similarity.
    text, ranking, reranking, natural language processing

    Use cases:
    - Improve search results ranking
    - Question-answer pair scoring
    - Document relevance ranking
    """

    model: types.HFReranker | OutputHandle[types.HFReranker] = connect_field(
        default=types.HFReranker(
            type="hf.reranker",
            repo_id="",
            path=None,
            variant=None,
            allow_patterns=None,
            ignore_patterns=None,
        ),
        description="The model ID to use for reranking",
    )
    query: str | OutputHandle[str] = connect_field(
        default="", description="The query text to compare against candidates"
    )
    candidates: list[str] | OutputHandle[list[str]] = connect_field(
        default=[], description="List of candidate texts to rank"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.huggingface.ranking.Reranker

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()
