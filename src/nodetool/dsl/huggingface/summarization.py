# This file is auto-generated by nodetool.dsl.codegen.
# Please do not edit this file manually.

# Instead, edit the node class in the source module and run the following commands to regenerate the DSL:
# nodetool package scan
# nodetool codegen

from pydantic import BaseModel, Field
import typing
from typing import Any
import nodetool.metadata.types
import nodetool.metadata.types as types
from nodetool.dsl.graph import GraphNode, SingleOutputGraphNode

import typing
from pydantic import Field
from nodetool.dsl.handles import OutputHandle, OutputsProxy, connect_field
import nodetool.nodes.huggingface.summarization
from nodetool.workflows.base_node import BaseNode


class Summarize(SingleOutputGraphNode[str], GraphNode[str]):
    """

    Summarizes text using a Hugging Face model.
    text, summarization, AI, LLM
    """

    model: types.HFTextGeneration | OutputHandle[types.HFTextGeneration] = (
        connect_field(
            default=types.HFTextGeneration(
                type="hf.text_generation",
                repo_id="",
                path=None,
                variant=None,
                allow_patterns=None,
                ignore_patterns=None,
            ),
            description="The model ID to use for the text generation",
        )
    )
    inputs: str | OutputHandle[str] = connect_field(
        default="", description="The input text to summarize"
    )
    max_length: int | OutputHandle[int] = connect_field(
        default=100, description="The maximum length of the generated text"
    )
    do_sample: bool | OutputHandle[bool] = connect_field(
        default=False, description="Whether to sample from the model"
    )

    @classmethod
    def get_node_class(cls) -> type[BaseNode]:
        return nodetool.nodes.huggingface.summarization.Summarize

    @classmethod
    def get_node_type(cls):
        return cls.get_node_class().get_node_type()
